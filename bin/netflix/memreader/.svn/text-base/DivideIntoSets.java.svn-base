
package netflix.memreader;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;
import cern.colt.list.IntArrayList;
import cern.colt.list.LongArrayList;
import netflix.memreader.MemReader;

public class DivideIntoSets 

{
  private MemReader 	mr;
  private int 			crossValidation;
  private String 		outFileIdTr;			//train
  private String 		outFileIdT;				//test
  private String 		outFileTr;
  private String        outFileT;
  private String        myPath;
  private Random 		rand;
  MemHelper mainMh;
  
 /*************************************************************************************************/
  
  public DivideIntoSets()
  {
	  
  }
  
  
  /*************************************************************************************************/
  
  public DivideIntoSets(String myMh, String myTr, String myT ) //main, train, test
  
  {
	  // sml
	    outFileT		 	= myT;
	    outFileTr 			= myTr;
	//    myPath 			=  myP;
	    mainMh 	= new MemHelper(myMh);
	    
	    rand = new Random();
  }
  
 /************************************************************************************************/
  
  
  public DivideIntoSets(int n)

  {
	  crossValidation=n;
  }
  
 /************************************************************************************************/
 
  
  //read a file, write 10% in one file and the remaining 90% in another with same names (e.g. test and train set)
 // repeat it for many times
  
  public void readData(double div, boolean clustering) 
  
  {
	  
     byte n=8; 				//e.g. for 90% train and 10% test
   
     int uid;
     IntArrayList  allUsers;
     LongArrayList  movies;
   
     
     BufferedWriter outT;
     BufferedWriter outTr;
     
     /* outFileT = outFileIdT + n + ".dat";   //e.g. sml_test1.dat
     	outFileTr = outFileIdTr + n + ".dat"; //e.g. sml_train1.dat
     */
     
     int ts=0;
     int trs=0;
     int all=0;
    //________________________________________________________________________________
     
        allUsers = mainMh.getListOfUsers(); //all users in the file
    
      try      
	  {
    	outT = new BufferedWriter(new FileWriter(outFileT));	// we wanna write in o/p file
    	outTr = new BufferedWriter(new FileWriter(outFileTr));	// we wanna write in o/p file
   		
     //-----------------------------
     // select subset of 500 users	
     //-----------------------------
    	
     
       for (int i = 0; i < allUsers.size(); i++) //go through all the users    
        {
        	
          uid = allUsers.getQuick(i);
    	  movies = mainMh.getMoviesSeenByUser(uid); //get movies seen by this user
    
    	  int mySize= movies.size();
    	//  System.out.println (" user  = " + i + " , size = " + mySize);
    	  
    	  int trainSize = (int) ((div) * mySize);	//80%-20%
    	  if (trainSize==0) trainSize=1;
    	  int testSize  = mySize - trainSize;
    	
    	//  if (clustering == true) { testSize = 8; trainSize = mySize -8;}
    	  
     //Enter some sort of randomization
    //______________________________________________________________________________________

    	  int doNotWriteTheseMovies[]	 = new int[testSize]; 			// 0-removeSize (e..g 0-5)
    	  int writeTheseMovies[] 		 = new int[mySize];
    	  double writeTheseRatings[]	 = new double[mySize];
    	  int writeTheseMovies1[] 		 = new int[mySize];
    	  
    	  int index=0;
    	    	  
    	  for (int j = 0; j < mySize; j++) //for all movies	    		
    		 {
    	   		  writeTheseMovies1[j] = writeTheseMovies[j] = MemHelper.parseUserOrMovie(movies.getQuick(j));
   	    		  writeTheseRatings[j]	= mainMh.getRating(uid, writeTheseMovies[j]);		
   	    		  
   	    		  if( writeTheseRatings[j] ==0) System.out.println("Zero rating");
    		 }
    	  
    	  
    	  if(testSize>1)    		  
    	  {
    	 //code to remove some rendom movies against a user
    		  
    		  for (int a=0;a<testSize; a++)
	    		  doNotWriteTheseMovies[a]=-1;	//initialise
	    	  
    	  //System.out.println("Current user saw Movies: " + mySize);
    	  long del=0;
    	  
    	  //____________________________________________
    		
    	  	while (true)	//loop untill true    		 
    		 {
    		  
    			 boolean dontWrite=false;
    			 
    			   //generate a random number 
    			 		try  				{del = rand.nextInt(mySize-1);  //select some random movies to delete (take their indexes) 
    			 		
    			 							}
    			 		catch (Exception no){ System.out.println(" error in random numbers");
    	    			 					}
    			 		
    			 		
    			      int  myDel = (int)del;
    			    
    			        			 
    			 for (int a= 0;a<testSize;a++)    		
    			 {
    				 
    				 if (myDel==doNotWriteTheseMovies [a]) {dontWrite=true; break;} //if already want to delete this
    				 
    			 }
    			 
    			 if (dontWrite == false) 
    				 {
    				    doNotWriteTheseMovies[index]= myDel;
    				    writeTheseMovies[myDel]= -1;			//If it is -1, it means we are not writing it
    				    index++;
    				 }
    			 
    			 if(index== testSize) break;
    			 
    		 }//end of while
     	  	
     }// if removeSize >1

   //_________________________________________________________________________________ 	  
    
    	  
    	 //start writing     	  
    	 for (int j = 0; j < mySize; j++)               
          {
    		   all++;
    		     		  
    		  //very important, we write in term of mid, uid, rating
    		     		    		  
    		  if(writeTheseMovies[j] != -1)		//we will write it    		  
    		  {
    			    String oneSample = (uid + ","+ writeTheseMovies[j]+ "," + writeTheseRatings[j]) ; //very important, we write in term of mid, uid, rating
    			    trs++;
    			    outTr.write(oneSample);
					outTr.newLine(); 		  
    			  
    		  }
    		  
    		  else //write in test file (writeTheseMovies1)    		  
    		  {
    			String oneSample = (uid + ","+ writeTheseMovies1[j]+ "," + writeTheseRatings[j]) ; //very important, we write in term of mid, uid, rating
  			    ts++;
  			    outT.write(oneSample);
				outT.newLine(); 
				   			  
    		  }
    		  
    		  		  
          }//end of movies for
    	  
    	     
      }//end of all user for
      
      System.out.println("Test = " + ts + " Train= " +trs + " all= "+all + " sum = " + (ts+trs));
      outT.close();
      outTr.close(); 
      
  }// end of try
      
    catch (IOException e)
	  	
	  	{
		  System.out.println("Write error!  Java error: " + e);
		  System.exit(1);

	    } //end of try-catch     

    	
  }
      
  
/************************************************************************************************/
  /************************************************************************************************/

  public String getTestingData(int n)
  
  {
	  return (outFileIdT + n + ".dat");
  }
  
  
public String getTrainingData(int n)
  
  {
	  return (outFileIdTr + n + ".dat");
  }
  

public String getPath(int n)

{
	  return (myPath);
}




/************************************************************************************************/
  
  public static void main(String arg[])
  
  {
	  
	  System.out.println(" Going to divide data into test and train data");

	  // sml
	
	
	    String t  = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\SML_ML\\Clustering\\sml_TestSet10.dat";
	    String tr = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\SML_ML\\Clustering\\sml_TrainSet.dat";
	    String p  = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\SML_ML\\Clustering\\";
	    String pm  = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\SML_ML\\Clustering\\";
	   
	  
	    //FT
/*	    String t  = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\FT\\TestTrain\\ft_20testSet.dat";
	    String tr = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\FT\\TestTrain\\ft_80trainSet.dat";
	    String p  = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\FT\\TestTrain\\";
	    String pm  = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\FT\\TestTrain\\";
	   	*/	

	   //ML
/*	    String t  = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\ML_ML\\Clustering\\ml_20testSet.dat";
	    String tr = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\ML_ML\\Clustering\\ml_80trainSet.dat";
	    String p  = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\ML_ML\\Clustering\\";
	    String pm  = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\ML_ML\\Clustering\\";
*/	
	
	    //BC	    
	/*  String t  = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\BC\\SimpleCheck\\Bc_testSet.dat";
	    String tr = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\BC\\SimpleCheck\\Bc_trainSet.dat";
	    String p  = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\BC\\SimpleCheck\\";
	    String pm  = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\BC\\SimpleCheck\\";
	    */

	             String m = pm + "sml_storedFeaturesRatingsTF.dat";
		 //		 String m = pm + "ft_storedFeaturesRatings.dat";
	    //		String m = pm + "ml_storedFeaturesRatingsTF.dat"; //only TF features are stored		   
	     //      String m = pm + "Bc_storedRatings.dat";
	              
		  DivideIntoSets dis= new DivideIntoSets(m, tr, t);
		  dis.readData(0.8, false);  //true if clusters
		  MemReader myReader = new MemReader();
		  
		  myReader.writeIntoDisk(t, p + "sml_clusteringTestSetStoredTF.dat"); 							//write test set into memory
		  myReader.writeIntoDisk(tr,  p + "sml_clusteringTrainSetStoredTF.dat");	   
		  
//		  
//		  myReader.writeIntoDisk(t, p + "ml_clusteringTestSetStoredTF.dat"); 							//write test set into memory
//		  myReader.writeIntoDisk(tr,  p + "ml_clusteringTrainSetStoredTF.dat");	   
//		  
		  /*myReader.writeIntoDisk(t, p + "ft_testSetStored.dat"); 							//write test set into memory
		  myReader.writeIntoDisk(tr,  p + "ft_trainSetStored.dat");	   
		  */
		  
		 /* myReader.writeIntoDisk(t, p + "Bc_testSetStored.dat"); 							
		  myReader.writeIntoDisk(tr,  p + "Bc_trainSetStored.dat");				
		*/	
	
	  
	  /*
	  String m = pm + "Sml_clusteringStoredRatings10.dat";
	    
	  DivideIntoSets dis= new DivideIntoSets(m, tr, t);
	  
	  
	   dis.readData(0.8);
	   
	   MemReader myReader = new MemReader();
	   
	   myReader.writeIntoDisk(t, p + "sml_clusteringTestSetStored.dat"); 							//write test set into memory
	   myReader.writeIntoDisk(tr,  p + "sml_clusteringTrainSetStored.dat");				
		
		*/    

	  
/*
	  //to check sensitivity parameter for 80-20 main test train dividion and for 80 validation and test (x =0.1 to 0.6), then cross validation on each 
	  for (int i=0; i<6;i++)
	  
	  {

		  // sml
		    String t  = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\SML_ML\\TestTrain\\sml_"+ ((i+1)*10)+ "testSet.dat";
		    String tr = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\SML_ML\\TestTrain\\sml_" + ((10- (i+1))*10)+ "trainSet.dat";
		    String p  = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\SML_ML\\TestTrain\\Trainer\\Actual20\\";
		    String pm  = "C:\\Users\\Musi\\workspace\\MusiRecommender\\DataSets\\SML_ML\\TestTrain\\";
		    
			
		 
		  String m = p + "sml_80trainSetStored.dat";
		    
		  DivideIntoSets dis= new DivideIntoSets(m, tr, t);
		  
		  //dis.readData(0.8);
		   dis.readData((10-(i+1))/10);
		   
		   System.out.println(" Done " +i);
		   
		   MemReader myReader = new MemReader();
		   myReader.writeIntoDisk(t, p + "Case" + ((i+1)*10)+ "sml_" + ((i+1)*10)+ "testSetStored.dat"); 							//write test set into memory
		   myReader.writeIntoDisk(tr,  p + "Case" + ((i+1)*10)+"sml_" + + ((10-(i+1))*10)+ "trainSetStored.dat");				
	  }
*/		    

	  
		   
	   System.out.println(" Done ");
	  
  }

  /************************************************************************************************/
  /*************************************************************************************************/
  
  public void divideIntoTestTrain(String mainFile, String trainFile, String testFile, double divisionFactor )
  
  {
	  
	  System.out.println(" Going to divide data into test and train data");
	  
	
	   
	  DivideIntoSets dis= new DivideIntoSets(mainFile, trainFile, testFile);
	  
	  //dis.readData(0.8);
	   dis.readData(divisionFactor, false);
	   //;
	   System.out.println(" Done ");
	  
  }
  
  /*************************************************************************************************/
  /*************************************************************************************************/
  
  
  
}

